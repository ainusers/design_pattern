# Adapter (适配器模式)


# 我第二个学习的设计模式


# 注：主要分为两种：类结构型模式 + 对象结构型模式 (常用、本例中使用的就是这种)
     前者使用继承、类之间的耦合度比后者高，所以应用相对较少些


# 简介
现实生活中，常常会因为两个接口不兼容，而不能在一起工作
举个栗子：
    讲中文的、讲英文的、因为语言不通无法交流，需要一个翻译
    相机内存卡，无法直接插入电脑接口，需要一个读卡器
    充电接口无法直接为typec充电，需要一个充电转接头


# 定义
将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作


# 优点
复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类
将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题


# 组成 (目标：电脑接口、适配者：内存卡、适配器：读卡器)
目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口
适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口
适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者


# 思考？
我直接new 适配者().适配者方法() 不行嘛？ 为何还要使用适配器模式包裹一层


# 注意 (由实践和深思得知)
主要的目标操作就是在成员变量类中的操作方法、外层的接口和转换器只是辅助工具
个人理解，其主要目的是
    为了保证class的封装性，不改动原有的类文件
    为了复用目标类和适配者


# 使用
一般操作：需要创建接口(需要使用的、合适的)和适配器、调用适配者(已存在、不合适的)