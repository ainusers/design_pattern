
# (1) 开闭原则是总纲：要求对扩展开发，对修改关闭
# (2) 单一原则：要求实现类要职责单一
# (3) 迪米特原则：要求要降低耦合
# (4) 接口隔离原则：要求在设计接口的时候要精简单一
# (5) 依赖倒置原则：要求面向接口编程
# (6) 里氏替换原则：要求不要去破坏继承系统
# (7) 组合复用原则(组合/聚合复用原则)：要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现


# 七大设计原则之依赖倒置原则


# 定义
高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象
通俗的讲：消费者和实现类都应该依赖接口/抽象类，实现类应该依赖于接口/抽象类，而不是反之


# 优点
降低类间的耦合性、提高代码的可读性和可维护性


# 思想
要面向接口编程，不要面向实现编程


# 代码实现
class Customer{

    //基本写法
    public void shopping(TaoBao shop){
        //购物
        System.out.println（shop.sell());
    }
    public void shopping(TianMao shop){
        //购物
        System.out.println(shop.sell());
    }

    //依赖倒置原则 (面向接口编程)
    //淘宝天猫统一继承至Shop
    public void shopping(Shop shop){
        //购物
        System.out.println(shop.sell());
    }
}